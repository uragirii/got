package tree_test

import (
	"bytes"
	"testing"

	"github.com/uragirii/got/internals/git/sha"
	"github.com/uragirii/got/internals/git/tree"
	testutils "github.com/uragirii/got/internals/test_utils"
)

/*
040000 tree b6c0223509578a8744c6f5cb93752c66662c7ba7    color
100644 blob 7942990553030eb0f9c28f74563f3e5c3df79d74    flag_parsing.go
040000 tree ce2447a2602cc7aef57e0e7fdc0e10ca706b180c    git
100644 blob f952d63561dc75ce61149e9dfcc9940cc39fd06a    root.go
100644 blob e23f8ca55544422e3e52773e66b63e7ecdfc683f    utils.go
*/

var TEST_DATA_LIST = []struct {
	Mode    tree.Mode
	Name    string
	SHA_STR string
}{
	{
		Name:    "utils.go",
		Mode:    tree.ModeNormal,
		SHA_STR: "e23f8ca55544422e3e52773e66b63e7ecdfc683f",
	},
	{
		Name:    "git",
		Mode:    tree.ModeDir,
		SHA_STR: "ce2447a2602cc7aef57e0e7fdc0e10ca706b180c",
	},
	{
		Name:    "root.go",
		Mode:    tree.ModeNormal,
		SHA_STR: "f952d63561dc75ce61149e9dfcc9940cc39fd06a",
	},
	{
		Name:    "flag_parsing.go",
		Mode:    tree.ModeNormal,
		SHA_STR: "7942990553030eb0f9c28f74563f3e5c3df79d74",
	},
	{
		Name:    "color",
		Mode:    tree.ModeDir,
		SHA_STR: "b6c0223509578a8744c6f5cb93752c66662c7ba7",
	},
}

var TREE_ENTERIES_COMPRESSED_DATA = []byte{0x78, 0x9c, 0x2a, 0x29, 0x4a, 0x4d, 0x55, 0x30, 0x34, 0x37, 0x63, 0x30, 0x31, 0x30, 0x30, 0x30,
	0x50, 0x48, 0xce, 0xcf, 0xc9, 0x2f, 0x62, 0xd8, 0x76, 0x40, 0xc9, 0x94, 0x33, 0xbc, 0xab, 0xdd,
	0xe5, 0xd8, 0xd7, 0xd3, 0x93, 0x4b, 0x75, 0xd2, 0xd2, 0x74, 0xaa, 0x97, 0x1b, 0x1a, 0x18, 0x98,
	0x99, 0x98, 0x28, 0xa4, 0xe5, 0x24, 0xa6, 0xc7, 0x17, 0x24, 0x16, 0x15, 0x67, 0xe6, 0xa5, 0xeb,
	0xa5, 0xe7, 0x33, 0x54, 0x3a, 0xcd, 0x64, 0x0d, 0x66, 0xe6, 0xdb, 0xf0, 0xf3, 0x50, 0x7f, 0x49,
	0x98, 0xbd, 0x5d, 0x8c, 0xed, 0xf7, 0xb9, 0x25, 0x10, 0xa3, 0xd2, 0x33, 0x4b, 0x18, 0xce, 0xa9,
	0xb8, 0x2f, 0x4a, 0xd0, 0x39, 0xbe, 0xee, 0x6b, 0x1d, 0x5f, 0xfd, 0x1d, 0x3e, 0x81, 0x53, 0x05,
	0xd9, 0x12, 0x3c, 0x50, 0x83, 0x8a, 0xf2, 0xf3, 0x4b, 0x40, 0x06, 0xfc, 0x0c, 0xba, 0x66, 0x9a,
	0x78, 0xa7, 0xf4, 0x5c, 0xa2, 0xc8, 0xbc, 0xb9, 0x7f, 0x4e, 0x4e, 0xe1, 0x39, 0x3c, 0xff, 0x42,
	0x16, 0x54, 0x49, 0x69, 0x49, 0x66, 0x4e, 0x31, 0x48, 0xcd, 0x23, 0xfb, 0x9e, 0xa5, 0xa1, 0x2e,
	0x4e, 0x7a, 0x76, 0x41, 0xe5, 0x76, 0x69, 0xdb, 0xec, 0xea, 0xce, 0xfe, 0xc9, 0xb0, 0x07, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x92, 0xbb, 0x46, 0xd8}

var TREE_ENTERIES_RAW = []byte{0x34, 0x30, 0x30, 0x30, 0x30, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0xb6, 0xc0, 0x22, 0x35,
	0x09, 0x57, 0x8a, 0x87, 0x44, 0xc6, 0xf5, 0xcb, 0x93, 0x75, 0x2c, 0x66, 0x66, 0x2c, 0x7b, 0xa7,
	0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x00, 0x79, 0x42, 0x99, 0x05, 0x53, 0x03, 0x0e, 0xb0, 0xf9,
	0xc2, 0x8f, 0x74, 0x56, 0x3f, 0x3e, 0x5c, 0x3d, 0xf7, 0x9d, 0x74, 0x34, 0x30, 0x30, 0x30, 0x30,
	0x20, 0x67, 0x69, 0x74, 0x00, 0xce, 0x24, 0x47, 0xa2, 0x60, 0x2c, 0xc7, 0xae, 0xf5, 0x7e, 0x0e,
	0x7f, 0xdc, 0x0e, 0x10, 0xca, 0x70, 0x6b, 0x18, 0x0c, 0x31, 0x30, 0x30, 0x36, 0x34, 0x34, 0x20,
	0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x67, 0x6f, 0x00, 0xf9, 0x52, 0xd6, 0x35, 0x61, 0xdc, 0x75, 0xce,
	0x61, 0x14, 0x9e, 0x9d, 0xfc, 0xc9, 0x94, 0x0c, 0xc3, 0x9f, 0xd0, 0x6a, 0x31, 0x30, 0x30, 0x36,
	0x34, 0x34, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x67, 0x6f, 0x00, 0xe2, 0x3f, 0x8c, 0xa5,
	0x55, 0x44, 0x42, 0x2e, 0x3e, 0x52, 0x77, 0x3e, 0x66, 0xb6, 0x3e, 0x7e, 0xcd, 0xfc, 0x68, 0x3f,
}

const TREE_ENTERIES_STR = `040000 tree b6c0223509578a8744c6f5cb93752c66662c7ba7	color
100644 blob 7942990553030eb0f9c28f74563f3e5c3df79d74	flag_parsing.go
040000 tree ce2447a2602cc7aef57e0e7fdc0e10ca706b180c	git
100644 blob f952d63561dc75ce61149e9dfcc9940cc39fd06a	root.go
100644 blob e23f8ca55544422e3e52773e66b63e7ecdfc683f	utils.go
`

var TREE_SHA_STR = "7cd6e558afb9b64f0224ffe734ee18acddd53a40"

func setupTestData() []tree.TreeEntry {
	enteries := make([]tree.TreeEntry, 0, len(TEST_DATA_LIST))
	for _, data := range TEST_DATA_LIST {
		sha, _ := sha.FromString(data.SHA_STR)
		enteries = append(enteries, tree.TreeEntry{
			Mode: data.Mode,
			Name: data.Name,
			SHA:  sha,
		})
	}
	return enteries
}

func TestFromEnteries(t *testing.T) {
	var DATA = setupTestData()
	t.Run("creates tree from unsorted entries", func(t *testing.T) {
		tree, err := tree.FromEnteries(DATA)

		objSha, _ := sha.FromString(TREE_SHA_STR)

		if err != nil {
			t.Errorf("expected error to be nil but got %s", err)
		}

		testutils.AssertString(t, "string", TREE_ENTERIES_STR, tree.String())
		testutils.AssertString(t, "raw", string(TREE_ENTERIES_RAW), tree.String())

		if !tree.GetSHA().Eq(objSha) {
			t.Errorf("expected the sha to be %s but got %s", TREE_SHA_STR, tree.GetSHA())
		}

		var buffer bytes.Buffer

		tree.Write(&buffer)

		compressedBytes := buffer.Bytes()

		testutils.AssertBytes(t, "raw bytes", TREE_ENTERIES_COMPRESSED_DATA, compressedBytes)

	})
}
